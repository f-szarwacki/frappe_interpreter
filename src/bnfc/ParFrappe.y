-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParFrappe
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsFrappe
import LexFrappe

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'       { PT _ (TS _ 1)  }
  '!='      { PT _ (TS _ 2)  }
  '%'       { PT _ (TS _ 3)  }
  '&&'      { PT _ (TS _ 4)  }
  '('       { PT _ (TS _ 5)  }
  ')'       { PT _ (TS _ 6)  }
  '*'       { PT _ (TS _ 7)  }
  '+'       { PT _ (TS _ 8)  }
  '++'      { PT _ (TS _ 9)  }
  ','       { PT _ (TS _ 10) }
  '-'       { PT _ (TS _ 11) }
  '--'      { PT _ (TS _ 12) }
  '->'      { PT _ (TS _ 13) }
  '/'       { PT _ (TS _ 14) }
  ':'       { PT _ (TS _ 15) }
  ';'       { PT _ (TS _ 16) }
  '<'       { PT _ (TS _ 17) }
  '<='      { PT _ (TS _ 18) }
  '='       { PT _ (TS _ 19) }
  '=='      { PT _ (TS _ 20) }
  '>'       { PT _ (TS _ 21) }
  '>='      { PT _ (TS _ 22) }
  '@'       { PT _ (TS _ 23) }
  'bool'    { PT _ (TS _ 24) }
  'else'    { PT _ (TS _ 25) }
  'false'   { PT _ (TS _ 26) }
  'func'    { PT _ (TS _ 27) }
  'if'      { PT _ (TS _ 28) }
  'int'     { PT _ (TS _ 29) }
  'lambda:' { PT _ (TS _ 30) }
  'print'   { PT _ (TS _ 31) }
  'return'  { PT _ (TS _ 32) }
  'string'  { PT _ (TS _ 33) }
  'true'    { PT _ (TS _ 34) }
  'void'    { PT _ (TS _ 35) }
  'while'   { PT _ (TS _ 36) }
  '{'       { PT _ (TS _ 37) }
  '||'      { PT _ (TS _ 38) }
  '}'       { PT _ (TS _ 39) }
  L_Ident   { PT _ (TV _)    }
  L_integ   { PT _ (TI _)    }
  L_quoted  { PT _ (TL _)    }

%%

Ident :: { (AbsFrappe.BNFC'Position, AbsFrappe.Ident) }
Ident  : L_Ident { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Ident (tokenText $1)) }

Integer :: { (AbsFrappe.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (AbsFrappe.BNFC'Position, String) }
String   : L_quoted { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Program :: { (AbsFrappe.BNFC'Position, AbsFrappe.Program) }
Program
  : ListStmt { (fst $1, AbsFrappe.Program (fst $1) (snd $1)) }

Stmt :: { (AbsFrappe.BNFC'Position, AbsFrappe.Stmt) }
Stmt
  : 'func' Ident ':' '(' ListArg ')' '->' Type Block { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.FnDef (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5) (snd $8) (snd $9)) }
  | ';' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Empty (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | Block { (fst $1, AbsFrappe.BStmt (fst $1) (snd $1)) }
  | ListItem ':' Type ';' { (fst $1, AbsFrappe.Decl (fst $1) (snd $1) (snd $3)) }
  | Stmt1 { (fst $1, (snd $1)) }
  | Expr ';' { (fst $1, AbsFrappe.SExp (fst $1) (snd $1)) }
  | Ident '++' ';' { (fst $1, AbsFrappe.Incr (fst $1) (snd $1)) }
  | Ident '--' ';' { (fst $1, AbsFrappe.Decr (fst $1) (snd $1)) }
  | 'return' Expr ';' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Ret (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'return' ';' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.VRet (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | 'if' '(' Expr ')' Block { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Cond (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'if' '(' Expr ')' Block 'else' Block { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.CondElse (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7)) }
  | 'while' '(' Expr ')' Block { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.While (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'print' '(' ListExpr ')' ';' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Print (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $3)) }

Arg :: { (AbsFrappe.BNFC'Position, AbsFrappe.Arg) }
Arg
  : Ident ':' Type { (fst $1, AbsFrappe.Arg (fst $1) (snd $1) (snd $3)) }
  | Ident ':' '@' Type { (fst $1, AbsFrappe.ArgRef (fst $1) (snd $1) (snd $4)) }

ListArg :: { (AbsFrappe.BNFC'Position, [AbsFrappe.Arg]) }
ListArg
  : {- empty -} { (AbsFrappe.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Index :: { (AbsFrappe.BNFC'Position, AbsFrappe.Index) }
Index : Expr { (fst $1, AbsFrappe.Index (fst $1) (snd $1)) }

ListIndex :: { (AbsFrappe.BNFC'Position, [AbsFrappe.Index]) }
ListIndex
  : {- empty -} { (AbsFrappe.BNFC'NoPosition, []) }
  | Index { (fst $1, (:[]) (snd $1)) }
  | Index ',' ListIndex { (fst $1, (:) (snd $1) (snd $3)) }

Block :: { (AbsFrappe.BNFC'Position, AbsFrappe.Block) }
Block
  : '{' ListStmt '}' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Block (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListStmt :: { (AbsFrappe.BNFC'Position, [AbsFrappe.Stmt]) }
ListStmt
  : {- empty -} { (AbsFrappe.BNFC'NoPosition, []) }
  | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

Item :: { (AbsFrappe.BNFC'Position, AbsFrappe.Item) }
Item : Ident { (fst $1, AbsFrappe.NoInit (fst $1) (snd $1)) }

ListItem :: { (AbsFrappe.BNFC'Position, [AbsFrappe.Item]) }
ListItem
  : Item { (fst $1, (:[]) (snd $1)) }
  | Item ',' ListItem { (fst $1, (:) (snd $1) (snd $3)) }

Stmt1 :: { (AbsFrappe.BNFC'Position, AbsFrappe.Stmt) }
Stmt1
  : LeftSideAss '=' Expr ';' { (fst $1, AbsFrappe.Ass (fst $1) (snd $1) (snd $3)) }

LeftSideAss :: { (AbsFrappe.BNFC'Position, AbsFrappe.LeftSideAss) }
LeftSideAss
  : Ident { (fst $1, AbsFrappe.LSAIdent (fst $1) (snd $1)) }

Type :: { (AbsFrappe.BNFC'Position, AbsFrappe.Type) }
Type
  : 'int' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Int (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | 'string' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Str (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | 'bool' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Bool (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | 'void' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Void (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | '(' ListType ')' '->' Type { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.FunT (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }

ListType :: { (AbsFrappe.BNFC'Position, [AbsFrappe.Type]) }
ListType
  : {- empty -} { (AbsFrappe.BNFC'NoPosition, []) }
  | Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

Expr6 :: { (AbsFrappe.BNFC'Position, AbsFrappe.Expr) }
Expr6
  : Ident { (fst $1, AbsFrappe.EVar (fst $1) (snd $1)) }
  | Integer { (fst $1, AbsFrappe.ELitInt (fst $1) (snd $1)) }
  | 'true' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.ELitTrue (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.ELitFalse (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | Ident '(' ListExpr ')' { (fst $1, AbsFrappe.EApp (fst $1) (snd $1) (snd $3)) }
  | String { (fst $1, AbsFrappe.EString (fst $1) (snd $1)) }
  | '(' Expr ')' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr5 :: { (AbsFrappe.BNFC'Position, AbsFrappe.Expr) }
Expr5
  : '-' Expr6 { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Neg (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '!' Expr6 { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Not (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (AbsFrappe.BNFC'Position, AbsFrappe.Expr) }
Expr4
  : Expr4 MulOp Expr5 { (fst $1, AbsFrappe.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (AbsFrappe.BNFC'Position, AbsFrappe.Expr) }
Expr3
  : Expr3 AddOp Expr4 { (fst $1, AbsFrappe.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (AbsFrappe.BNFC'Position, AbsFrappe.Expr) }
Expr2
  : Expr2 RelOp Expr3 { (fst $1, AbsFrappe.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (AbsFrappe.BNFC'Position, AbsFrappe.Expr) }
Expr1
  : Expr2 '&&' Expr1 { (fst $1, AbsFrappe.EAnd (fst $1) (snd $1) (snd $3)) }
  | Expr2 { (fst $1, (snd $1)) }

Expr :: { (AbsFrappe.BNFC'Position, AbsFrappe.Expr) }
Expr
  : Expr1 '||' Expr { (fst $1, AbsFrappe.EOr (fst $1) (snd $1) (snd $3)) }
  | 'lambda:' '(' ListArg ')' '->' Type Block { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.ELambda (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $6) (snd $7)) }
  | Expr1 { (fst $1, (snd $1)) }

ListExpr :: { (AbsFrappe.BNFC'Position, [AbsFrappe.Expr]) }
ListExpr
  : {- empty -} { (AbsFrappe.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (AbsFrappe.BNFC'Position, AbsFrappe.AddOp) }
AddOp
  : '+' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Plus (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Minus (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (AbsFrappe.BNFC'Position, AbsFrappe.MulOp) }
MulOp
  : '*' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Times (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Div (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.Mod (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (AbsFrappe.BNFC'Position, AbsFrappe.RelOp) }
RelOp
  : '<' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.LTH (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.LE (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.GTH (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.GE (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | '==' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.EQU (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1), AbsFrappe.NE (uncurry AbsFrappe.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err AbsFrappe.Program
pProgram = fmap snd . pProgram_internal
}

