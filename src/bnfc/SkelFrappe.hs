-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelFrappe where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsFrappe

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsFrappe.Ident -> Result
transIdent x = case x of
  AbsFrappe.Ident string -> failure x

transProgram :: Show a => AbsFrappe.Program' a -> Result
transProgram x = case x of
  AbsFrappe.Program _ stmts -> failure x

transStmt :: Show a => AbsFrappe.Stmt' a -> Result
transStmt x = case x of
  AbsFrappe.FnDef _ ident args type_ block -> failure x
  AbsFrappe.Empty _ -> failure x
  AbsFrappe.BStmt _ block -> failure x
  AbsFrappe.Decl _ items type_ -> failure x
  AbsFrappe.Ass _ leftsideass expr -> failure x
  AbsFrappe.SExp _ expr -> failure x
  AbsFrappe.Incr _ ident -> failure x
  AbsFrappe.Decr _ ident -> failure x
  AbsFrappe.Ret _ expr -> failure x
  AbsFrappe.VRet _ -> failure x
  AbsFrappe.Cond _ expr block -> failure x
  AbsFrappe.CondElse _ expr block1 block2 -> failure x
  AbsFrappe.While _ expr block -> failure x
  AbsFrappe.Print _ exprs -> failure x

transArg :: Show a => AbsFrappe.Arg' a -> Result
transArg x = case x of
  AbsFrappe.Arg _ ident type_ -> failure x
  AbsFrappe.ArgRef _ ident type_ -> failure x

transIndex :: Show a => AbsFrappe.Index' a -> Result
transIndex x = case x of
  AbsFrappe.Index _ expr -> failure x

transBlock :: Show a => AbsFrappe.Block' a -> Result
transBlock x = case x of
  AbsFrappe.Block _ stmts -> failure x

transItem :: Show a => AbsFrappe.Item' a -> Result
transItem x = case x of
  AbsFrappe.NoInit _ ident -> failure x

transLeftSideAss :: Show a => AbsFrappe.LeftSideAss' a -> Result
transLeftSideAss x = case x of
  AbsFrappe.LSAIdent _ ident -> failure x

transType :: Show a => AbsFrappe.Type' a -> Result
transType x = case x of
  AbsFrappe.Int _ -> failure x
  AbsFrappe.Str _ -> failure x
  AbsFrappe.Bool _ -> failure x
  AbsFrappe.Void _ -> failure x
  AbsFrappe.FunT _ types type_ -> failure x

transExpr :: Show a => AbsFrappe.Expr' a -> Result
transExpr x = case x of
  AbsFrappe.EVar _ ident -> failure x
  AbsFrappe.ELitInt _ integer -> failure x
  AbsFrappe.ELitTrue _ -> failure x
  AbsFrappe.ELitFalse _ -> failure x
  AbsFrappe.EApp _ ident exprs -> failure x
  AbsFrappe.EString _ string -> failure x
  AbsFrappe.Neg _ expr -> failure x
  AbsFrappe.Not _ expr -> failure x
  AbsFrappe.EMul _ expr1 mulop expr2 -> failure x
  AbsFrappe.EAdd _ expr1 addop expr2 -> failure x
  AbsFrappe.ERel _ expr1 relop expr2 -> failure x
  AbsFrappe.EAnd _ expr1 expr2 -> failure x
  AbsFrappe.EOr _ expr1 expr2 -> failure x
  AbsFrappe.ELambda _ args type_ block -> failure x

transAddOp :: Show a => AbsFrappe.AddOp' a -> Result
transAddOp x = case x of
  AbsFrappe.Plus _ -> failure x
  AbsFrappe.Minus _ -> failure x

transMulOp :: Show a => AbsFrappe.MulOp' a -> Result
transMulOp x = case x of
  AbsFrappe.Times _ -> failure x
  AbsFrappe.Div _ -> failure x
  AbsFrappe.Mod _ -> failure x

transRelOp :: Show a => AbsFrappe.RelOp' a -> Result
transRelOp x = case x of
  AbsFrappe.LTH _ -> failure x
  AbsFrappe.LE _ -> failure x
  AbsFrappe.GTH _ -> failure x
  AbsFrappe.GE _ -> failure x
  AbsFrappe.EQU _ -> failure x
  AbsFrappe.NE _ -> failure x
