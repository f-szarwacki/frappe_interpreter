// Takes argument as variable.
func square_in_place: (x: @int) -> void {
  x = x * x;
  return;
}

// Takes argument as value.
func square: (x: int) -> int {
  return x * x;
}

// Recurrence.
func fib: (n: int) -> int {
  // If statement requires blocks to avoid if-if-else problem.
  if (n <= 1) {
    return n;
  } else {
    return fib(n-1) + fib(n-2);
  }
}

// While loop and print instruction taking a list of arguments.
i: int;
i = 0;
while (i < 10) {
  print("Fib(", i, ") = ", fib(i), ".\n");
  i++;
}

// Function as a return value.
func multiply_by: (n: int) -> (int) -> int {
  return lambda: (t: int) -> int {
    return t * n;
  };
}

mul5: (int) -> int;
mul5 = multiply_by(5);

// Will print "10".
print(mul5(2));

// Static variable binding.
b: int;
b = 21;

func b1: () -> void {
  print(b);
  return;
}

func b2: () -> void {
  b: string;
  b = "This will not be printed.";
  b1();
  return;
}

b2();   // prints "21"

// Nested function definitions.
func c1: () -> void {
  q: string;
  q = "c1";
  func c2: () -> void {
    func c3: () -> void {
      print(q);
      return;
    }
    q: string;
    q = "c2";
    c3();
    return;
  }
  c2();
  return;
}

// Prints "c1".
c1();
